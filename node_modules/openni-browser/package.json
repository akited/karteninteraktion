{
  "name": "openni-browser",
  "description": "Server <-> Browser bridge for OpenNI skeleton.",
  "version": "0.1.7",
  "author": {
    "name": "Pedro Teixeira"
  },
  "main": "server.js",
  "tags": [
    "kinect",
    "openni",
    "browser",
    "skeleton"
  ],
  "dependencies": {
    "openni": ">=0.2.6",
    "shoe": "*",
    "emit-stream": "*",
    "event-stream": "*",
    "JSONStream": "*",
    "pup": "*",
    "browserify": "*",
    "async": "*"
  },
  "devDependencies": {
    "ecstatic": "*"
  },
  "preinstall": "node_modules/.bin/browserify browser/browser.js -o browser/openni.js",
  "repository": {
    "type": "git",
    "url": "http://github.com/pgte/node-openni-browser.git"
  },
  "scripts": {
    "start": "node server.js"
  },
  "readme": "# openni-browser\n\nServer <-> Browser bridge for OpenNI skeleton.\n\nWorks with kinect.\n\nUses Socks.js (via [Shoe](https://github.com/substack/shoe)).\n\n## Install\n\nInstall libusb and OpenNI following the platform-specific instructions at https://github.com/OpenNI/OpenNI\n\n```bash\n$ npm install openni-browser\n```\n\n## Create Node Server\n\n```js\nvar kinectSock = require('openni-browser')();\nvar ecstatic = require('ecstatic')(__dirname + '/public');\n\nvar server = require('http').createServer(ecstatic);\n\nkinectSock.install(server, '/skeleton');\n\nserver.listen(8080, function() {\n  console.log('kinect socks server listening...');\n});\n```\n\n### Create Client\n\nCopy `browser/openni.js` into the public folder.\n\nIn your HTML file include that script before the `body` close tag:\n\n```html\n<script src=\"openni.js\"></script>\n```\n\nInside a browser script:\n\nInitialize connection to the server by providing a full or relative URL:\n\n```js\nvar skeleton = openni('/skeleton');\n```\n\nListen for user events:\n\n```js\n[\n  'newuser',\n  'lostuser',\n  'posedetected',\n  'calibrationstart',\n  'calibrationsuccess',\n  'calibrationfail'\n].forEach(function(userEventType) {\n  sleleton.on(userEventType, function(userId) {\n    console.log(userEventType + ' (' + userId + ')');\n  });\n});\n```\n\nListen for joint position changes:\n\n```js\n\njointNames = [\n  \"head\",\n  \"neck\",\n  \"torso\",\n  \"waist\",\n  \"left_collar\",\n  \"left_shoulder\",\n  \"left_elbow\",\n  \"left_wrist\",\n  \"left_hand\",\n  \"left_fingertip\",\n  \"right_collar\",\n  \"right_shoulder\",\n  \"right_elbow\",\n  \"right_wrist\",\n  \"right_hand\",\n  \"right_fingertip\",\n  \"left_hip\",\n  \"left_knee\",\n  \"left_ankle\",\n  \"left_foot\",\n  \"right_hip\",\n  \"right_knee\",\n  \"right_ankle\",\n  \"right_foot\"  \n];\n\njointNames.forEach(function(jointName) {\n  kinect.on(jointName, function(userId, x, y, z) {\n    console.log('The joint ' + jointName + ' of user ' + userId +\n      ' moved to (' + x + ', ' + y + ', ' + z + ')');\n  });\n});\n```\n\n# Connection Handling\n\nThe `skeleton` object will also emit:\n\n* `connect` — when there is a connection to the server\n* `end` — when the connection to the server is ended\n\n## Examples\n\nSee the `examples` folder.\n\n# Licence\n\nMIT",
  "readmeFilename": "README.md",
  "_id": "openni-browser@0.1.7",
  "_from": "openni-browser@"
}
