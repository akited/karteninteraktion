plot(0, 0, main = expression("theta")
)
plot(0, 0, main = expression(theta))
png()
bitmap()
pdf()
quartz()
axis()
serialize()
points()
png()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
set.seed(1)
rpois(5, 2)
?plotmath
s = 1
s
s <- 1
s
set.seed(12345)
rnorm(5,mean=5,sd=1)
rnorm(5,mean=5,sd=1)
set.seed(12345)
set.seed(12345)
rnorm(5,mean=5,sd=1)
set.seed(12345)
rnorm(5,mean=5,sd=1)
set.seed(31);
heightsCM = rnorm(30,mean=188, sd=5);
weightsK = rnorm(30,mean=84,sd=3);
hasDaughter = sample(c(TRUE,FALSE),size=30,replace=T);
dataFrame = data.frame(heightsCM,weightsK,hasDaughter);
sub = dataFrame[height > 188,]
sub = dataFrame[heightsCM > 188,]
mean(sub$weightsK)
set.seed(41)
cauchyValues = dcauchy()
cauchyValues = dcauchy(100)
set.seed(415)
sample(cauchyValues,10,replace=TRUE)
set.seed(31);
heightsCM = rnorm(30,mean=188, sd=5);
weightsK = rnorm(30,mean=84,sd=3);
hasDaughter = sample(c(TRUE,FALSE),size=30,replace=T);
dataFrame = data.frame(heightsCM,weightsK,hasDaughter);
sub = dataFrame[height > 188,]
sub = dataFrame[heightsCM > 188,]
mean(sub$weightsK)
set.seed(41)
cauchyValues = dcauchy(100)
set.seed(41)
x <- rnorm(100)
set.seed(41)
cauchyValues = dcauchy(x)
set.seed(415)
sample(cauchyValues,10,replace=TRUE)
fix(cauchyValues)
fix(x)
set.seed(41)
cauchyValues = dcauchy(100)
source('/Volumes/Daten/Coursera/DataAnalysis/Ass3/data/rankall.R')
rbg(1,2,3)
rgb(1,2,3)
rgb(1,1,1)
powder
x = "she likes rum raisin after running hard"
grep(^s(.*?)r,x)
grep("^s(.*?)r",x)
length(grep("^s(.*?)r",x))
regexpr("^s(.*?)r",x)
rnorm(1000,mean=50, sd=4)
s <- rnorm(1000,mean=50, sd=4)
hist(s)
c(1:555)
c(1:555,3)
seq(1,555,by=3)
seq(1,by=3,length=555)
c(matrix(2:100, 10))
pdf
factors("test")
factor("test")
s <- factor("test")
s.type
typeof(s)
d <- factor("test")
typeof(d)
c("test")
f = c("test")
typeof(f)
mode(f)
mode(d)
library(sp)
install.packages("sp")
library(sp)
demo(meuse)
demo(meuse)
sec(from=1,to=64,by=2)
seq(from=1,to=64,by=2)
x = [1:64]
x = c[1:64]
[1:64]
x = c(1:64)
x
dim(x)
dim(x) = c(16,4)
typeof(meuse.grid)
mean(zinc[ffreq=1])
data(meuse)
View(meuse)
mean(meuse[ffreq=1])
mean(meuse(ffreq=1)
)
mean(subset(meuse$zinc,meuse$ffreq=1))
mean(subset(meuse$zinc,meuse$ffreq==1))
methods("mean")
mean.data.frame = function(x, ...) x
methods("mean")
s = data.frame
s
q
dataFrame
mean(dataFrame)
mean.data.frame = function(x, ...) sapply(x, mean, ...)
mean(dataFrame)
x = [1 2; 1 2]
x = [1 2, 1 2]
x = [1 2; 1 2]
y = [1 2; 1 2]
a = c(1,2)
b = c(1,2)
x = data.frame(a,b)
x
mean(x)
mean.data.frame = function(x, ...) lapply(x, mean, ...)
mean(x)
mean.data.frame = function(x, ...) rapply(x, mean, ...)
mean(x)
mean.data.frame = function(x, ...) apply(x, mean, ...)
mean(x)
mean.data.frame = function(x, ...) apply(x, 1,mean, ...)
mean(x)
mean.data.frame = function(x, ...) apply(x, 2,mean, ...)
mean(x)
trajectory <- structure(1, class = trajectory)
trajectory <- structure(1, class = vector)
trajectory <- function(x,y,t) { class(out) <- "trajectory" }
trajectory
trajectory <- function(x,y,t) {
out <- list(data=data.frame(x=x, y=y, t=t))
class(out) <- "trajectory"
}
trajectory
x = trajectory(c(1,2,3),c(1,2,3),c(1,2,3))
fix(weightsK)
x.data
x$data
x
trajectory <- function(x,y,t) {
out <- list(data=data.frame(x=x, y=y, t=t))
class(out) <- "trajectory"
invisible(out)
}
x = trajectory(c(1,2,3),c(1,2,3),c(1,2,3))
fix(x)
x
plot.trajectory <- function(object) {
data <- object$data
plot(data$x, data$y, type="n")
lines(data$x, data$y)
}
x.plot
plot(x)
x = trajectory(c(1,2,3),c(1,4,6),c(2,4,2))
plot(x)
x = trajectory(c(1,2,3),c(1,4,6),c(1,2,3))
plot(x)
x
methods(plot)
y = data.frame(c(1,2),c(2,1))
mean.data.frame = function(x, ...) apply(x, 2,mean, ...)
mean(y)
y
methods(mean)
mean.data.frame = function(x, ...) apply(x, 1,mean, ...)
mean(y)
y
mean.data.frame = function(x, ...) apply(x, 2,mean, ...)
mean(x)
mean(y)
x
z = data.frame(c(1,2),c(1,2))
mean(z)
z
mean.data.frame = function(x, ...) apply(x, 1,mean, ...)
mean(z)
mean(y)
y
fix(trajectory)
x
fix(trajectory)
fix(x)
trajectory <- function(x,y,t) {
out <- list(data=data.frame(x=x, y=y, t=t))
class(out) <- "trajectory"
invisible(out)
}
plot.trajectory <- function(object) {
data <- object$data
plot(data$x, data$y, type="n")
}
plot(x)
plot(data$x, data$y)
plot.trajectory <- function(object) {
data <- object$data
plot(data$x, data$y)
}
plot(data$x, data$y)
plot(x)
plot.trajectory <- function(object, type="b") {
data <- object$data
plot(data$x, data$y,type=type)
}
plot(x)
package(HMM)
install.package(HMM)
install.packages(HMM)
install.packages('HMM')
initHMM(c("X","Y"), c("a","b","c"))
install.packages('msm')
library('msm')
data(heart)
data(cav)
print(cav[1:10,])
twoway4.q <- rbind(c(-0.5, 0.25, 0, 0.25), c(0.166, -0.498, 0.166, 0.166),
c(0, 0.25, -0.5, 0.25), c(0, 0, 0, 0))
View(twoway4.q)
statetable.msm(state, PTNUM, data=cav)
state ~ years
c(state ~ years)
cav
cav$state
state
cav$state ~ cav$years
crudeinits.msm(state ~ years, PTNUM, data=cav, qmatrix=twoway4.q)
cav.msm <- msm( state ~ years, subject=PTNUM, data = cav,
qmatrix = twoway4.q, death = 4,
control = list ( trace = 2, REPORT = 1 )  )
cav.msm
qmatrix.msm(cav.msm)
plot.msm(cav.msm)
View(cav)
library('msm')
demo('msm')
msm
example('msm')
setwd("/Development/github/karteninteraktion")
data_c = read.csv('pan.csv')
hmm_train <- HMMFit(data_c, nStates=3,control=list(init="KMEANS"))
data_t = data_c[485:529]
data_t = data_c[485:529,]
data_tr = data_c[1:484,]
hmm_train <- HMMFit(data_tr, nStates=3,control=list(init="KMEANS"))
forwardBackward(hmm_train,data_t)
library('RHmm')
data_c = read.csv('pan.csv')
hmm_train <- HMMFit(data_c, nStates=3,control=list(init="KMEANS"))
data_t = data_c[485:529]
data_t = data_c[485:529,]
data_tr = data_c[1:484,]
hmm_train <- HMMFit(data_tr, nStates=3,control=list(init="KMEANS"))
forwardBackward(hmm_train,data_t)
fix(hmm_train)
fix(hmm_train)
hmm_train
test = forwardBackward(hmm_train,data_t)
test
View(data_tr)
data_tr_1 = data_c[1:30,]
hmm_train <- HMMFit(data_tr_1, nStates=3,control=list(init="KMEANS"))
hmm_train
View(data_c)
data_tr_1 = data_c[1:30,]
data_tr_2 = data_c[34:58,]
data_2_tr = merge(data_tr_1,data_tr_2)
hmm_train <- HMMFit(data_2_tr, nStates=3,control=list(init="KMEANS"))
View(data_2_tr)
data_2_tr = data.frame(data_tr_1,data_tr_2)
data_tr_2 + data_tr_1
d = rbind(data_tr_1)
d = rbind(data_tr_2)
d = rbind(data_tr_2,data_tr_1)
View(d)
d = rbind(data_tr_2,data_tr_1)
hmm_train <- HMMFit(d, nStates=3,control=list(init="KMEANS"))
hmm_train
hmm_train <- HMMFit(data_tr, nStates=3,control=list(init="KMEANS"))
hmm_train
data(n3d_2s)
View(obs_n3d_2s)
View(dataFrame)
View(d)
data_t = data_c[485:529,,]
View(data_t)
View(data_c)
