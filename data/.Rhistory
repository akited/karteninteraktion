plot(0, 0, main = expression("theta")
)
plot(0, 0, main = expression(theta))
png()
bitmap()
pdf()
quartz()
axis()
serialize()
points()
png()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
set.seed(1)
rpois(5, 2)
?plotmath
s = 1
s
s <- 1
s
set.seed(12345)
rnorm(5,mean=5,sd=1)
rnorm(5,mean=5,sd=1)
set.seed(12345)
set.seed(12345)
rnorm(5,mean=5,sd=1)
set.seed(12345)
rnorm(5,mean=5,sd=1)
set.seed(31);
heightsCM = rnorm(30,mean=188, sd=5);
weightsK = rnorm(30,mean=84,sd=3);
hasDaughter = sample(c(TRUE,FALSE),size=30,replace=T);
dataFrame = data.frame(heightsCM,weightsK,hasDaughter);
sub = dataFrame[height > 188,]
sub = dataFrame[heightsCM > 188,]
mean(sub$weightsK)
set.seed(41)
cauchyValues = dcauchy()
cauchyValues = dcauchy(100)
set.seed(415)
sample(cauchyValues,10,replace=TRUE)
set.seed(31);
heightsCM = rnorm(30,mean=188, sd=5);
weightsK = rnorm(30,mean=84,sd=3);
hasDaughter = sample(c(TRUE,FALSE),size=30,replace=T);
dataFrame = data.frame(heightsCM,weightsK,hasDaughter);
sub = dataFrame[height > 188,]
sub = dataFrame[heightsCM > 188,]
mean(sub$weightsK)
set.seed(41)
cauchyValues = dcauchy(100)
set.seed(41)
x <- rnorm(100)
set.seed(41)
cauchyValues = dcauchy(x)
set.seed(415)
sample(cauchyValues,10,replace=TRUE)
fix(cauchyValues)
fix(x)
set.seed(41)
cauchyValues = dcauchy(100)
source('/Volumes/Daten/Coursera/DataAnalysis/Ass3/data/rankall.R')
rbg(1,2,3)
rgb(1,2,3)
rgb(1,1,1)
powder
x = "she likes rum raisin after running hard"
grep(^s(.*?)r,x)
grep("^s(.*?)r",x)
length(grep("^s(.*?)r",x))
regexpr("^s(.*?)r",x)
rnorm(1000,mean=50, sd=4)
s <- rnorm(1000,mean=50, sd=4)
hist(s)
c(1:555)
c(1:555,3)
seq(1,555,by=3)
seq(1,by=3,length=555)
c(matrix(2:100, 10))
pdf
factors("test")
factor("test")
s <- factor("test")
s.type
typeof(s)
d <- factor("test")
typeof(d)
c("test")
f = c("test")
typeof(f)
mode(f)
mode(d)
library(sp)
install.packages("sp")
library(sp)
demo(meuse)
demo(meuse)
sec(from=1,to=64,by=2)
seq(from=1,to=64,by=2)
x = [1:64]
x = c[1:64]
[1:64]
x = c(1:64)
x
dim(x)
dim(x) = c(16,4)
typeof(meuse.grid)
mean(zinc[ffreq=1])
data(meuse)
View(meuse)
mean(meuse[ffreq=1])
mean(meuse(ffreq=1)
)
mean(subset(meuse$zinc,meuse$ffreq=1))
mean(subset(meuse$zinc,meuse$ffreq==1))
methods("mean")
mean.data.frame = function(x, ...) x
methods("mean")
s = data.frame
s
q
dataFrame
mean(dataFrame)
mean.data.frame = function(x, ...) sapply(x, mean, ...)
mean(dataFrame)
x = [1 2; 1 2]
x = [1 2, 1 2]
x = [1 2; 1 2]
y = [1 2; 1 2]
a = c(1,2)
b = c(1,2)
x = data.frame(a,b)
x
mean(x)
mean.data.frame = function(x, ...) lapply(x, mean, ...)
mean(x)
mean.data.frame = function(x, ...) rapply(x, mean, ...)
mean(x)
mean.data.frame = function(x, ...) apply(x, mean, ...)
mean(x)
mean.data.frame = function(x, ...) apply(x, 1,mean, ...)
mean(x)
mean.data.frame = function(x, ...) apply(x, 2,mean, ...)
mean(x)
trajectory <- structure(1, class = trajectory)
trajectory <- structure(1, class = vector)
trajectory <- function(x,y,t) { class(out) <- "trajectory" }
trajectory
trajectory <- function(x,y,t) {
out <- list(data=data.frame(x=x, y=y, t=t))
class(out) <- "trajectory"
}
trajectory
x = trajectory(c(1,2,3),c(1,2,3),c(1,2,3))
fix(weightsK)
x.data
x$data
x
trajectory <- function(x,y,t) {
out <- list(data=data.frame(x=x, y=y, t=t))
class(out) <- "trajectory"
invisible(out)
}
x = trajectory(c(1,2,3),c(1,2,3),c(1,2,3))
fix(x)
x
plot.trajectory <- function(object) {
data <- object$data
plot(data$x, data$y, type="n")
lines(data$x, data$y)
}
x.plot
plot(x)
x = trajectory(c(1,2,3),c(1,4,6),c(2,4,2))
plot(x)
x = trajectory(c(1,2,3),c(1,4,6),c(1,2,3))
plot(x)
x
methods(plot)
y = data.frame(c(1,2),c(2,1))
mean.data.frame = function(x, ...) apply(x, 2,mean, ...)
mean(y)
y
methods(mean)
mean.data.frame = function(x, ...) apply(x, 1,mean, ...)
mean(y)
y
mean.data.frame = function(x, ...) apply(x, 2,mean, ...)
mean(x)
mean(y)
x
z = data.frame(c(1,2),c(1,2))
mean(z)
z
mean.data.frame = function(x, ...) apply(x, 1,mean, ...)
mean(z)
mean(y)
y
fix(trajectory)
x
fix(trajectory)
fix(x)
trajectory <- function(x,y,t) {
out <- list(data=data.frame(x=x, y=y, t=t))
class(out) <- "trajectory"
invisible(out)
}
plot.trajectory <- function(object) {
data <- object$data
plot(data$x, data$y, type="n")
}
plot(x)
plot(data$x, data$y)
plot.trajectory <- function(object) {
data <- object$data
plot(data$x, data$y)
}
plot(data$x, data$y)
plot(x)
plot.trajectory <- function(object, type="b") {
data <- object$data
plot(data$x, data$y,type=type)
}
plot(x)
setwd("/Development/github/karteninteraktion/data")
read.csv("left_hand_up.csv")
up = read.csv("left_hand_up.csv")
names(up)[1] = "x"
names(up)
names(up)[2] = "y"
names(up)[3] = "z"
polt(up$x,up$y)
plot(up$x,up$y)
plot(up$y,up$x)
plot(up$x,up$y)
up_n = subset(up, up$y > -100)
plot(up_n$x,up_n$y)
up_n = subset(up, up$x > -70)
up_n = subset(up_n, up$y > -100)
plot(up_n$x,up_n$y)
write.csv(up_n,file="normalized_up.csv")
plot(up$x,up$y)
install.packages("scatterplot3d", dependencies = TRUE)
library(scatterplot3d)
scatterplot3d(x = up_n$x, y = up_n$y, z = up_n$z)
